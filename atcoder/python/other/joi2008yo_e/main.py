#!/usr/bin/env python3
# from typing import *
import copy

# def solve(a: str, b: str, c: List[str], d: List[List[str]]) -> int:
def solve(r, c, ll):
    ans = 0
    for bit in range(1 << r):
        # 本来は deepcopy だが、MLEになるため手動で移す
        tmp_ll = [[None for _ in range(c)] for _ in range(r)]
        for i in range(r):
            for j in range(c):
                tmp_ll[i][j] = ll[i][j]
        for i in range(r):
            # i番目にbitが立っているとき、ひっくり返す
            if bit & (1 << i):
                for j in range(c):
                    tmp_ll[i][j] = 1 - tmp_ll[i][j]
        total = 0
        for j in range(c):
            count = 0
            for i in range(r):
                if tmp_ll[i][j] == 1:
                    count += 1
            total += max(count, r-count)
        if ans < total:
            ans = total
    return ans

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    r = int(next(tokens))
    c = int(next(tokens))
    ll = [[int(next(tokens)) for _ in range(c)] for _ in range(r)]
    assert next(tokens, None) is None
    a1 = solve(r, c, ll)
    print(a1)


if __name__ == '__main__':
    main()
