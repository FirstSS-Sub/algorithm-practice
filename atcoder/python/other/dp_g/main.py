#!/usr/bin/env python3
from collections import defaultdict, deque

# v: 頂点の数, e: 辺の数, s_list: 辺の開始地点のリスト, t_list: 辺の向き先地点のリスト
def topological_sort(v, g):

    used = [False]*v
    # トポロジカルソートされた数列
    ans = deque()

    def dfs(u):
        if used[u]: return
        used[u] = True
        for i in g[u]: dfs(i)
        # 帰りがけ順で追加
        ans.appendleft(u)

    def tsort():
        for i in range(v): dfs(i)

    tsort()
    return ans

# def solve(N: int, M: int, x: List[int], y: List[int]) -> int:
def solve(N, d):
    l = topological_sort(N, d)
    dp = [0 for _ in range(N)]
    for n in l:
        for m in d[n]:
            if dp[m] < dp[n] + 1:
                dp[m] = dp[n] + 1
    return max(dp)

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, M = map(int, input().split())
    x = [None for _ in range(M)]
    y = [None for _ in range(M)]
    d = defaultdict(list)
    for i in range(M):
        x[i], y[i] = map(int, input().split())
        x[i] -= 1
        y[i] -= 1
        d[x[i]].append(y[i])
    a = solve(N, d)
    print(a)


if __name__ == '__main__':
    main()
