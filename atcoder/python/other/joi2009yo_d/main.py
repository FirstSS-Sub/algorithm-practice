#!/usr/bin/env python3
# from typing import *
import sys
sys.setrecursionlimit(10**6)

# def solve(a: str, b: str, c: List[str], d: List[List[str]]) -> int:
def solve(m, n, d):
    ans = {'ans': 0}
    for i in range(n):
        for j in range(m):
            if d[i][j] == 1:
                dfs(m, n, [a[:] for a in d], i, j, ans, 1)
    return ans['ans']

def dfs(m, n, d, i, j, ans, count):
    d[i][j] = 0
    if i-1 >= 0 and d[i-1][j] == 1:
        dfs(m, n, [a[:] for a in d], i-1, j, ans, count+1)
    if i+1 < n and d[i+1][j] == 1:
        dfs(m, n, [a[:] for a in d], i+1, j, ans, count+1)
    if j-1 >= 0 and d[i][j-1] == 1:
        dfs(m, n, [a[:] for a in d], i, j-1, ans, count+1)
    if j+1 < m and d[i][j+1] == 1:
        dfs(m, n, [a[:] for a in d], i, j+1, ans, count+1)
    if ans['ans'] < count:
        ans['ans'] = count
    

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    a = int(next(tokens))
    b = int(next(tokens))
    d = [[None for _ in range(a)] for _ in range(b)]
    for i in range(b):
        for j in range(a):
            d[i][j] = int(next(tokens))
    assert next(tokens, None) is None
    a1 = solve(a, b, d)
    print(a1)


if __name__ == '__main__':
    main()
