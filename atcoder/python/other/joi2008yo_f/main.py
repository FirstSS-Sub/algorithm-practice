#!/usr/bin/env python3
# from typing import *
import heapq

def dijkstra(edges, num_node, start, goal):
    node = [float('inf')] * num_node # スタート地点以外の値はINFで初期化
    node[start] = 0 # スタート地点は0で初期化
    
    node_name = []
    heapq.heappush(node_name, [0, [start]])
    
    while len(node_name) > 0:
        # ヒープから取り出し
        _, min_point = heapq.heappop(node_name)
        last = min_point[-1]
        if last == goal:
            # print("道順とコスト", [min_point, node])
            return [min_point, node] # 道順とコストを返す
        
        # 経路の要素を各変数に格納
        for factor in edges[last]:
            next = factor[0]
            cost = factor[1]
            
            if node[last] + cost < node[next]:
                node[next] = node[last] + cost
                # print("heappush", node_name, [node[last] + cost, min_point + [next]])
                heapq.heappush(node_name, [node[last] + cost, min_point + [next]])
    return None


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    n = int(next(tokens))
    k = int(next(tokens))
    
    edges = [[] for _ in range(n)]
    for _ in range(k):
        num = int(next(tokens))
        # 客の注文票のとき
        if num == 0:
            a = int(next(tokens))
            b = int(next(tokens))
            res = dijkstra(edges, n, a-1, b-1)
            # print(a-1, "から", b-1, "に行きたい")
            # print(edges)
            if res is None:
                print(-1)
            else:
                # 最初の添字0は道順、1はコスト[1番目へのコスト, 2番目へのコスト, ...]
                print(res[1][b-1])
            
        # 新たに運行した船舶の運行情報
        elif num == 1:
            c = int(next(tokens))
            d = int(next(tokens))
            e = int(next(tokens))
            edges[c-1].append([d-1, e])
            edges[d-1].append([c-1, e])

if __name__ == '__main__':
    main()
