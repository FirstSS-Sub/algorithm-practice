#!/usr/bin/env python3
# from typing import *

YES = 'Yes'
NO = 'No'


def solve(N, M, A, B):
    X = [-1] * N  # ローカルにXを初期化
    G = [[] for _ in range(N)]  # ローカルにGを初期化

    def dfs(c, x):
        stack = [(c, x)]
        while stack:
            c, x = stack.pop()
            if X[c] == -1:
                X[c] = x
                for d in G[c]:
                    if X[d] == -1:
                        stack.append((d, 1 - x))
                    elif X[d] == X[c]:
                        return False
            elif X[c] != x:
                return False
        return True

    # グラフの構築
    for i in range(M):
        G[A[i] - 1].append(B[i] - 1)
        G[B[i] - 1].append(A[i] - 1)

    # DFSでの探索な初期化
    for i in range(N):
        if X[i] == -1:
            if not dfs(i, 0):
                return NO

    return YES


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    input = sys.stdin.read
    tokens = iter(input().strip().split())
    N = int(next(tokens))
    M = int(next(tokens))
    A = [int(next(tokens)) for _ in range(M)]
    B = [int(next(tokens)) for _ in range(M)]
    assert next(tokens, None) is None
    print(solve(N, M, A, B))


if __name__ == '__main__':
    main()
