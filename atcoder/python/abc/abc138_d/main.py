#!/usr/bin/env python3
# from typing import *
import sys
from collections import defaultdict
sys.setrecursionlimit(100000)

# def solve(N: int, Q: int, a: List[int], b: List[int], p: List[int], x: List[int]) -> List[str]:
def solve(N, Q, a, b, p, x):
    G = defaultdict(list)
    for i in range(N-1):
        G[a[i]-1].append(b[i]-1)
        
    ans = [0]*N
    for i in range(Q):
        seen = [False]*N
        dfs(G, p[i]-1, seen, ans, x[i])
    return ans

def dfs(G, i, seen, counter, count):
    if seen[i]: return
    
    seen[i] = True
    counter[i] += count
    
    for node in G[i]:
        dfs(G, node, seen, counter, count)


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, Q = map(int, input().split())
    a = [None for _ in range(N - 1)]
    b = [None for _ in range(N - 1)]
    p = [None for _ in range(Q)]
    x = [None for _ in range(Q)]
    for i in range(N - 1):
        a[i], b[i] = map(int, input().split())
    for i in range(Q):
        p[i], x[i] = map(int, input().split())
    ans = solve(N, Q, a, b, p, x)
    print(*[ans[i] for i in range(N)])


if __name__ == '__main__':
    main()
