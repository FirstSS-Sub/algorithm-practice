#!/usr/bin/env python3
# from typing import *
from heapq import heappush, heappop

MOD = 998244353


# def solve(N: int, M: int, K: int, u: List[int], v: List[int], w: List[int]) -> int:
def solve(N, M, K, u, v, w):
    graph = [[] for _ in range(N)]
    for i in range(M):
        graph[u[i]-1].append((v[i]-1, w[i]))
        graph[v[i]-1].append((u[i]-1, w[i]))
    
    # プリム法
    # 頂点がマークされているか確認する配列
    marked = [False for _ in range(N)]
    marked_cnt = 0
    marked[0] = True
    marked_cnt += 1
    
    # heap
    q = []
    for j, c in graph[0]:
        heappush(q, (c, j))
    
    total = 0
    while marked_cnt < N:
        c, i = heappop(q)
        if marked[i]:
            continue
        marked[i] = True
        marked_cnt += 1
        total = (total % MOD) + (c % MOD)
        
        for j, c in graph[i]:
            if marked[j]:
                continue
            heappush(q, (c, j))
    return (total % MOD) % K

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N, M, K = map(int, input().split())
    u = [None for _ in range(M)]
    v = [None for _ in range(M)]
    w = [None for _ in range(M)]
    for i in range(M):
        u[i], v[i], w[i] = map(int, input().split())
    a = solve(N, M, K, u, v, w)
    print(a)


if __name__ == '__main__':
    main()
