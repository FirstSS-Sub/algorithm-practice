#!/usr/bin/env python3
# from typing import *


# def solve(N: int, A: List[int]) -> Tuple[int, List[int]]:
def solve(N, A):
    flag = [False]*N
    flag[0] = True
    ans = [1]
    saiki(A, A[0], flag, ans)
    for i in range(len(ans)-1):
        if A[ans[-1]-1] == ans[i]:
            return len(ans[i:]), ans[i:]

def saiki(A, node, flag, ans):
    if flag[node-1]: return
    flag[node-1] = True
    ans.append(node)
    saiki(A, A[node-1], flag, ans)

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    A = [None for _ in range(N)]
    for i in range(N):
        A[i] = int(next(tokens))
    assert next(tokens, None) is None
    M, B = solve(N, A)
    print(M)
    print(*[B[i] for i in range(M)])


if __name__ == '__main__':
    main()
