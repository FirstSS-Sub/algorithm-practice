#!/usr/bin/env python3
# from typing import *
import math
from collections import defaultdict

# def solve(N: int, A: List[int]) -> int:
def solve(N, A):
    d = defaultdict(int)
    zero = 0
    for a in A:
        if a == 0:
            zero += 1
            continue
        for n in range(int(math.sqrt(a)), 0, -1):
            if a % (n**2) == 0:
                d[a//(n**2)] += 1
                break
    ans = 0
    for v in d.values():
        ans += math.comb(v, 2)
    ans += zero * (len(A)-1) - math.comb(zero, 2)
    return ans


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    A = [None for _ in range(N)]
    for i in range(N):
        A[i] = int(next(tokens))
    assert next(tokens, None) is None
    a = solve(N, A)
    print(a)


if __name__ == '__main__':
    main()
