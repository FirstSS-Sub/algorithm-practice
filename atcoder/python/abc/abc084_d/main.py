#!/usr/bin/env python3
# from typing import *
import math

# def solve(Q: int, l: List[int], r: List[int]) -> List[str]:
def solve(Q, l, r):
    ans = []
    r_max = 10**5
    is_prime_list = eratosthenes_sieve(r_max)
    like_2017_list = like_2017(is_prime_list)
    for i in range(Q):
        count_r = like_2017_list[r[i]-1]
        count_l = 0
        if l[i]-3 >= 0:
            count_l = like_2017_list[l[i]-2]
        ans.append(count_r - count_l)
    return ans

def eratosthenes_sieve(n):
    # 素数判定を最初に全てTrueにしておき、後で素数でないものを篩い落としていく
    is_prime = [True]*n
    is_prime[0] = False # 1は素数ではない
    for p in range(1, int(math.sqrt(n))+1):
        if is_prime[p]:
            # p番目（p+1）が素数だった場合、その倍数は必ず合成数（素数でない）ので、篩い落とす
            for q in range((p+1)**2-1, n, (p+1)):
                is_prime[q] = False
    return is_prime

def like_2017(is_prime_list):
    count = 0
    like_2017_list = []
    for i, is_prime in enumerate(is_prime_list):
        if i != 1 and is_prime:
            if is_prime_list[int(((i+1)+1)/2-1)]:
                count += 1
        like_2017_list.append(count)
    return like_2017_list

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    Q = int(input())
    l = [None for _ in range(Q)]
    r = [None for _ in range(Q)]
    for i in range(Q):
        l[i], r[i] = map(int, input().split())
    a = solve(Q, l, r)
    for i in range(Q):
        print(a[i])


if __name__ == '__main__':
    main()
