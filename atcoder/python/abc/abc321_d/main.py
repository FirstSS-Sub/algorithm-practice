#!/usr/bin/env python3
# from typing import *
from bisect import bisect_right

# def solve(N: int, M: int, P: int, A: List[int], B: List[int]) -> int:
def solve(N, M, P, A, B):
    B.sort()
    BB = []
    bb = 0
    for b in B:
        bb += b
        BB.append(bb)
    ans = 0
    for a in A:
        sep = P-a if P-a > 0 else 0
        b = bisect_right(B, sep)
        if b > 0:
            ans += BB[b-1]+(a*b)
        ans += (len(B)-b)*P
    return ans


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    M = int(next(tokens))
    P = int(next(tokens))
    A = [None for _ in range(N)]
    B = [None for _ in range(M)]
    for i in range(N):
        A[i] = int(next(tokens))
    for i in range(M):
        B[i] = int(next(tokens))
    assert next(tokens, None) is None
    a = solve(N, M, P, A, B)
    print(a)


if __name__ == '__main__':
    main()
