#!/usr/bin/env python3
# from typing import *


# def solve(N: int, Q: List[int], A: List[int], B: List[int]) -> int:
def solve(N, Q, A, B):
    na = 0
    ans = 0
    while True:
        qa = []
        flag = True
        for i in range(N):
            d = Q[i] - na*A[i]
            if d < 0:
                flag = False
                break
            qa.append(d)
        if not flag: break
        qb = []
        for i in range(N):
            if B[i] == 0:
                qb.append(10**6)
            else:
                qb.append(qa[i] // B[i])
        nb = min(qb)
        if na + nb > ans:
            ans = na + nb
        na += 1
    return ans
            
        
# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    Q = [None for _ in range(N)]
    A = [None for _ in range(N)]
    B = [None for _ in range(N)]
    for i in range(N):
        Q[i] = int(next(tokens))
    for i in range(N):
        A[i] = int(next(tokens))
    for i in range(N):
        B[i] = int(next(tokens))
    assert next(tokens, None) is None
    a = solve(N, Q, A, B)
    print(a)


if __name__ == '__main__':
    main()
